import asyncio
import re

import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from constants import BOT_TOKEN, HOST

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())


class ContactForm(StatesGroup):
    name = State()
    email = State()
    subject = State()
    message = State()


# /start
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì© ”®—Ç—ñ–Ω—ñ—à –∂—ñ–±–µ—Ä—É")],
            [KeyboardButton(text="üìÑ –ú–µ–Ω—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ–º")],
            [KeyboardButton(text="‚Ñπ –ê“õ–ø–∞—Ä–∞—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–°”ô–ª–µ–º üëã\nENIC.kz –±–∞–π–ª–∞–Ω—ã—Å –±–æ—Ç—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!\n–ù–µ —ñ—Å—Ç–µ–≥—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?",
        reply_markup=kb
    )


@dp.message(F.text == "üì© ”®—Ç—ñ–Ω—ñ—à –∂—ñ–±–µ—Ä—É")
async def handle_application_start(message: Message, state: FSMContext):
    await state.set_state(ContactForm.name)
    await message.answer("–ê—Ç—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")


@dp.message(F.text == "‚Ñπ –ê“õ–ø–∞—Ä–∞—Ç")
async def handle_info(message: Message):
    await message.answer(
        "–ë“±–ª –±–æ—Ç –∞—Ä“õ—ã–ª—ã —Å—ñ–∑ ENIC –æ—Ä—Ç–∞–ª—ã“ì—ã–Ω–∞ ”©—Ç—ñ–Ω—ñ—à, —Å“±—Ä–∞“õ –Ω–µ–º–µ—Å–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ –∞–ª–∞—Å—ã–∑.\n\n"
        "–ë–∞—Å—Ç–∞—É “Ø—à—ñ–Ω 'üì© ”®—Ç—ñ–Ω—ñ—à –∂—ñ–±–µ—Ä—É' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑."
    )


@dp.message(F.text == "üìÑ –ú–µ–Ω—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ–º")
async def list_user_requests(message: Message):
    user_id = message.from_user.id
    url = f'{HOST}/api/contact/messages/{user_id}'
    r = requests.get(url)
    if r.status_code != 200:
        await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä–ª—ñ–∫ “õ–∞—Ç–µ")
    messages = r.json().get('messages', [])
    if not messages:
        await message.answer(
            "–ñ—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ“£—ñ–∑ –∂–æ“õ"
        )
    else:
        text = "<b>üìÇ –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ“£—ñ–∑:</b>\n\n"
        for i, m in enumerate(messages, 1):
            text += (
                f"<b>{i}. {'‚úÖ' if m['is_checked'] else '‚è∫Ô∏è'} {m['subject']}</b>\n"
                f"<b>{m['created_at']}</b>\n"
                f"---------------------------------------\n"
                f"<i>{m['message'][:100]}</i>...\n"
                f"---------------------------------------\n\n"
            )

        await message.answer(text)


@dp.message(F.text == "/about")
async def about(message: Message):
    await message.answer(
        "‚ÑπÔ∏è <b>ENIC.kz –±–∞–π–ª–∞–Ω—ã—Å –±–æ—Ç—ã</b>\n\n"
        "–ë“±–ª –±–æ—Ç –∞—Ä“õ—ã–ª—ã —Å—ñ–∑ ENIC.KZ –æ—Ä—Ç–∞–ª—ã“ì—ã–Ω–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ –∞–ª–∞—Å—ã–∑.\n\n"
        "üìå “ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä:\n"
        "‚Äî –ë–∞–π–ª–∞–Ω—ã—Å —Ñ–æ—Ä–º–∞—Å—ã–Ω —Ç–æ–ª—Ç—ã—Ä—É\n"
        "‚Äî –¢–∞“õ—ã—Ä—ã–ø –ø–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É\n"
        "‚Äî –ñ–∞—É–∞–ø –∫“Ø—Ç—É (—ç–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞ –∞—Ä“õ—ã–ª—ã)\n\n"
        "üí° ENIC-Kazakhstan ‚Äî –±—ñ–ª—ñ–º –±–µ—Ä—É “õ“±–∂–∞—Ç—Ç–∞—Ä—ã–Ω —Ç–∞–Ω—É, –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è –∂”ô–Ω–µ –ë–æ–ª–æ–Ω –ø—Ä–æ—Ü–µ—Å—ñ —Å–∞–ª–∞—Å—ã–Ω–¥–∞ –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä–µ—Ç—ñ–Ω “±–ª—Ç—Ç—ã“õ –æ—Ä—Ç–∞–ª—ã“õ.\n\n"
        "üåê –°–∞–π—Ç: https://enic.kz"
    )


# 1. –ò–º—è
@dp.message(ContactForm.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
    await state.set_state(ContactForm.email)


EMAIL_REGEX = re.compile(r"^[\w\.-]+@[\w\.-]+\.\w{2,}$")


# 2. Email
@dp.message(ContactForm.email)
async def get_email(message: Message, state: FSMContext):
    email = message.text.strip()

    if not EMAIL_REGEX.match(email):
        await message.answer("‚ùå –≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞ –¥“±—Ä—ã—Å –µ–º–µ—Å. “ö–∞–π—Ç–∞–¥–∞–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
        return  # ‚ùó –ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ

    await state.update_data(email=email)
    await message.answer("”®—Ç—ñ–Ω—ñ—à—Ç—ñ“£ —Ç–∞“õ—ã—Ä—ã–±—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
    await state.set_state(ContactForm.subject)


# 3. –¢–∞“õ—ã—Ä—ã–ø
@dp.message(ContactForm.subject)
async def get_subject(message: Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await message.answer("”®—Ç—ñ–Ω—ñ—à –º–∞–∑–º“±–Ω—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await state.set_state(ContactForm.message)


# 4. –•–∞–±–∞—Ä–ª–∞–º–∞
@dp.message(ContactForm.message)
async def get_message(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    data = await state.get_data()

    text = (
        "<b>üì¨ –ñ—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞:</b>\n\n"
        f"<b>üë§ –ê—Ç—ã:</b> {data['name']}\n"
        f"<b>üìß Email:</b> {data['email']}\n"
        f"<b>üìù –¢–∞“õ—ã—Ä—ã–ø:</b> {data['subject']}\n"
        f"<b>üí¨ –•–∞–±–∞—Ä–ª–∞–º–∞:</b>\n{data['message']}"
    )

    url = f'{HOST}/api/contact/messages/send'
    r = requests.post(url, data={
        'name': data['name'],
        'email': data['email'],
        'subject': data['subject'],
        'message': data['message'],
        'telegram_id': message.from_user.id,
    })
    if r.status_code != 200:
        await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä–ª—ñ–∫ “õ–∞—Ç–µ")
    else:
        await message.answer(text)
        await message.answer("‚úÖ ”®—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ! –†–∞“õ–º–µ—Ç.")
    await state.clear()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
